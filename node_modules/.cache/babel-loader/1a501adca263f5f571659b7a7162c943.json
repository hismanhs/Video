{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hisman\\\\Desktop\\\\Git\\\\src\\\\components\\\\Call.js\";\nimport React, { Component } from \"react\";\nimport AgoraRTC from \"agora-rtc-sdk\";\nvar client = AgoraRTC.createClient({\n  mode: \"live\",\n  codec: \"h264\"\n});\nvar USER_ID = Math.floor(Math.random() * 1000000001);\nvar APP_ID = \"783432fc9ff04b08ad36998136e48c56\";\n\nvar Call = /*#__PURE__*/function (_Component) {\n  _inherits(Call, _Component);\n\n  function Call() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Call);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Call)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.localStream = AgoraRTC.createStream({\n      streamID: USER_ID,\n      audio: true,\n      video: true,\n      screen: false\n    });\n    _this.state = {\n      remoteStreams: []\n    };\n\n    _this.initLocalStream = function () {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      me.localStream.init(function () {\n        console.log(\"getUserMedia successfully\");\n        me.localStream.play(\"agora_local\");\n      }, function (err) {\n        console.log(\"getUserMedia failed\", err);\n      });\n    };\n\n    _this.initClient = function () {\n      client.init(APP_ID, function () {\n        console.log(\"AgoraRTC client initialized\");\n      }, function (err) {\n        console.log(\"AgoraRTC client init failed\", err);\n      });\n\n      _this.subscribeToClient();\n    };\n\n    _this.subscribeToClient = function () {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      client.on(\"stream-added\", me.onStreamAdded);\n      client.on(\"stream-subscribed\", me.onRemoteClientAdded);\n      client.on(\"stream-removed\", me.onStreamRemoved);\n      client.on(\"peer-leave\", me.onPeerLeave);\n    };\n\n    _this.onStreamAdded = function (evt) {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var stream = evt.stream;\n      console.log(\"New stream added: \" + stream.getId());\n      me.setState({\n        remoteStreams: _objectSpread({}, me.state.remoteStream, _defineProperty({}, stream.getId(), stream))\n      }, function () {\n        // Subscribe after new remoteStreams state set to make sure\n        // new stream dom el has been rendered for agora.io sdk to pick up\n        client.subscribe(stream, function (err) {\n          console.log(\"Subscribe stream failed\", err);\n        });\n      });\n    };\n\n    _this.joinChannel = function () {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      client.join(null, me.props.channel, USER_ID, function (uid) {\n        console.log(\"User \" + uid + \" join channel successfully\");\n        client.publish(me.localStream, function (err) {\n          console.log(\"Publish local stream error: \" + err);\n        });\n        client.on(\"stream-published\", function (evt) {\n          console.log(\"Publish local stream successfully\");\n        });\n      }, function (err) {\n        console.log(\"Join channel failed\", err);\n      });\n    };\n\n    _this.onRemoteClientAdded = function (evt) {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var remoteStream = evt.stream;\n      me.state.remoteStreams[remoteStream.getId()].play(\"agora_remote \" + remoteStream.getId());\n    };\n\n    _this.onStreamRemoved = function (evt) {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var stream = evt.stream;\n\n      if (stream) {\n        var streamId = stream.getId();\n        var remoteStreams = me.state.remoteStreams;\n        stream.stop();\n        delete remoteStreams[streamId];\n        me.setState({\n          remoteStreams: remoteStreams\n        });\n        console.log(\"Remote stream is removed \" + stream.getId());\n      }\n    };\n\n    _this.onPeerLeave = function (evt) {\n      var me = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var stream = evt.stream;\n\n      if (stream) {\n        var streamId = stream.getId();\n        var remoteStreams = me.state.remoteStreams;\n        stream.stop();\n        delete remoteStreams[streamId];\n        me.setState({\n          remoteStreams: remoteStreams\n        });\n        console.log(evt.uid + \" leaved from this channel\");\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Call, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initLocalStream();\n      this.initClient();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      console.log(prevProps);\n\n      if (prevProps.channel !== this.props.channel && this.props.channel !== \"\") {\n        this.joinChannel();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"agora_local\",\n        style: {\n          width: \"400px\",\n          height: \"400px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }), Object.keys(this.state.remoteStreams).map(function (key) {\n        var stream = _this2.state.remoteStreams[key];\n        var streamId = stream.getId();\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: streamId,\n          id: \"agora_remote \".concat(streamId),\n          style: {\n            width: \"400px\",\n            height: \"400px\"\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }\n        });\n      }));\n    }\n  }]);\n\n  return Call;\n}(Component);\n\nexport { Call as default };","map":{"version":3,"sources":["C:/Users/Hisman/Desktop/Git/src/components/Call.js"],"names":["React","Component","AgoraRTC","client","createClient","mode","codec","USER_ID","Math","floor","random","APP_ID","Call","localStream","createStream","streamID","audio","video","screen","state","remoteStreams","initLocalStream","me","init","console","log","play","err","initClient","subscribeToClient","on","onStreamAdded","onRemoteClientAdded","onStreamRemoved","onPeerLeave","evt","stream","getId","setState","remoteStream","subscribe","joinChannel","join","props","channel","uid","publish","streamId","stop","prevProps","prevState","width","height","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport AgoraRTC from \"agora-rtc-sdk\";\nlet client = AgoraRTC.createClient({ mode: \"live\", codec: \"h264\" });\n\nconst USER_ID = Math.floor(Math.random() * 1000000001);\nconst APP_ID = \"783432fc9ff04b08ad36998136e48c56\";\n\nexport default class Call extends Component {\n  localStream = AgoraRTC.createStream({\n    streamID: USER_ID,\n    audio: true,\n    video: true,\n    screen: false\n  });\n\n  state = {\n    remoteStreams: []\n  };\n\n  componentDidMount() {\n    this.initLocalStream();\n    this.initClient();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(prevProps)\n    if (prevProps.channel !== this.props.channel && this.props.channel !== \"\") {\n      this.joinChannel();\n    }\n  }\n\n  initLocalStream = () => {\n    let me = this;\n    me.localStream.init(\n      function() {\n        console.log(\"getUserMedia successfully\");\n        me.localStream.play(\"agora_local\");\n      },\n      function(err) {\n        console.log(\"getUserMedia failed\", err);\n      }\n    );\n  };\n\n  initClient = () => {\n    client.init(\n      APP_ID,\n      function() {\n        console.log(\"AgoraRTC client initialized\");\n      },\n      function(err) {\n        console.log(\"AgoraRTC client init failed\", err);\n      }\n    );\n    this.subscribeToClient();\n  };\n\n  subscribeToClient = () => {\n    let me = this;\n    client.on(\"stream-added\", me.onStreamAdded);\n    client.on(\"stream-subscribed\", me.onRemoteClientAdded);\n\n    client.on(\"stream-removed\", me.onStreamRemoved);\n\n    client.on(\"peer-leave\", me.onPeerLeave);\n  };\n\n  onStreamAdded = evt => {\n    let me = this;\n    let stream = evt.stream;\n    console.log(\"New stream added: \" + stream.getId());\n    me.setState(\n      {\n        remoteStreams: {\n          ...me.state.remoteStream,\n          [stream.getId()]: stream\n        }\n      },\n      () => {\n        // Subscribe after new remoteStreams state set to make sure\n        // new stream dom el has been rendered for agora.io sdk to pick up\n        client.subscribe(stream, function(err) {\n          console.log(\"Subscribe stream failed\", err);\n        });\n      }\n    );\n  };\n\n  joinChannel = () => {\n    let me = this;\n    client.join(\n      null,\n      me.props.channel,\n      USER_ID,\n      function(uid) {\n        console.log(\"User \" + uid + \" join channel successfully\");\n        client.publish(me.localStream, function(err) {\n          console.log(\"Publish local stream error: \" + err);\n        });\n\n        client.on(\"stream-published\", function(evt) {\n          console.log(\"Publish local stream successfully\");\n        });\n      },\n      function(err) {\n        console.log(\"Join channel failed\", err);\n      }\n    );\n  };\n\n  onRemoteClientAdded = evt => {\n    let me = this;\n    let remoteStream = evt.stream;\n    me.state.remoteStreams[remoteStream.getId()].play(\n      \"agora_remote \" + remoteStream.getId()\n    );\n  };\n\n  onStreamRemoved = evt => {\n    let me = this;\n    let stream = evt.stream;\n    if (stream) {\n      let streamId = stream.getId();\n      let { remoteStreams } = me.state;\n\n      stream.stop();\n      delete remoteStreams[streamId];\n\n      me.setState({ remoteStreams });\n\n      console.log(\"Remote stream is removed \" + stream.getId());\n    }\n  };\n\n  onPeerLeave = evt => {\n    let me = this;\n    let stream = evt.stream;\n    if (stream) {\n      let streamId = stream.getId();\n      let { remoteStreams } = me.state;\n\n      stream.stop();\n      delete remoteStreams[streamId];\n\n      me.setState({ remoteStreams });\n\n      console.log(evt.uid + \" leaved from this channel\");\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"agora_local\" style={{ width: \"400px\", height: \"400px\" }} />\n        {Object.keys(this.state.remoteStreams).map(key => {\n          let stream = this.state.remoteStreams[key];\n          let streamId = stream.getId();\n          return (\n            <div\n              key={streamId}\n              id={`agora_remote ${streamId}`}\n              style={{ width: \"400px\", height: \"400px\" }}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}